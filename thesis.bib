
@incollection{hutchison_kleene_2014,
  address   = {Cham},
  title     = {Kleene {Algebra} with {Converse}},
  volume    = {8428},
  isbn      = {978-3-319-06250-1 978-3-319-06251-8},
  url       = {http://link.springer.com/10.1007/978-3-319-06251-8_7},
  abstract  = {The equational theory generated by all algebras of binary relations with operations of union, composition, converse and reﬂexive transitive closure was studied by Bernátsky, Bloom, Ésik, and Stefanescu in 1995. We reformulate some of their proofs in syntactic and elementary terms, and we provide a new algorithm to decide the corresponding theory. This algorithm is both simpler and more eﬃcient; it relies on an alternative automata construction, that allows us to prove that the considered equational theory lies in the complexity class PSpace.},
  language  = {en},
  urldate   = {2021-06-25},
  booktitle = {Relational and {Algebraic} {Methods} in {Computer} {Science}},
  publisher = {Springer International Publishing},
  author    = {Brunet, Paul and Pous, Damien},
  year      = {2014},
  doi       = {10.1007/978-3-319-06251-8_7},
  note      = {Series Title: Lecture Notes in Computer Science},
  pages     = {101--118}
}

@article{Zhang_de_Amorim_Gaboardi_2022,
  title        = {On Incorrectness Logic and Kleene Algebra with Top and Tests},
  url          = {http://arxiv.org/abs/2108.07707},
  doi          = {10.48550/arXiv.2108.07707},
  abstractnote = {Kleene algebra with tests (KAT) is a foundational equational framework for reasoning about programs, which has found applications in program transformations, networking and compiler optimizations, among many other areas. In his seminal work, Kozen proved that KAT subsumes propositional Hoare logic, showing that one can reason about the (partial) correctness of while programs by means of the equational theory of KAT. In this work, we investigate the support that KAT provides for reasoning about incorrectness, instead, as embodied by Ohearn’s recently proposed incorrectness logic. We show that KAT cannot directly express incorrectness logic. The main reason for this limitation can be traced to the fact that KAT cannot express explicitly the notion of codomain, which is essential to express incorrectness triples. To address this issue, we study Kleene Algebra with Top and Tests (TopKAT), an extension of KAT with a top element. We show that TopKAT is powerful enough to express a codomain operation, to express incorrectness triples, and to prove all the rules of incorrectness logic sound. This shows that one can reason about the incorrectness of while-like programs by means of the equational theory of TopKAT.},
  note         = {arXiv:2108.07707 [cs]},
  number       = {arXiv:2108.07707},
  publisher    = {arXiv},
  author       = {Zhang, Cheng and de Amorim, Arthur Azevedo and Gaboardi, Marco},
  year         = {2022},
  month        = {Aug}
}

@article{Zhang_de_Amorim_Gaboardi_2022_POPL,
  title        = {On incorrectness logic and Kleene algebra with top and tests},
  volume       = {6},
  doi          = {10.1145/3498690},
  abstractnote = {Kleene algebra with tests (KAT) is a foundational equational framework for reasoning about programs, which has found applications in program transformations, networking and compiler optimizations, among many other areas. In his seminal work, Kozen proved that KAT subsumes propositional Hoare logic, showing that one can reason about the (partial) correctness of while programs by means of the equational theory of KAT. In this work, we investigate the support that KAT provides for reasoning about incorrectness, instead, as embodied by O’Hearn’s recently proposed incorrectness logic. We show that KAT cannot directly express incorrectness logic. The main reason for this limitation can be traced to the fact that KAT cannot express explicitly the notion of codomain, which is essential to express incorrectness triples. To address this issue, we study Kleene Algebra with Top and Tests (TopKAT), an extension of KAT with a top element. We show that TopKAT is powerful enough to express a codomain operation, to express incorrectness triples, and to prove all the rules of incorrectness logic sound. This shows that one can reason about the incorrectness of while-like programs by means of the equational theory of TopKAT.},
  number       = {POPL},
  journal      = {Proceedings of the ACM on Programming Languages},
  author       = {Zhang, Cheng and de Amorim, Arthur Azevedo and Gaboardi, Marco},
  year         = {2022},
  month        = {Jan},
  pages        = {29:1-29:30}
}


@inproceedings{Pous_Rot_Wagemaker_2021,
  address      = {Berlin, Heidelberg},
  title        = {On Tools for Completeness of Kleene Algebra with Hypotheses},
  isbn         = {978-3-030-88700-1},
  url          = {https://doi.org/10.1007/978-3-030-88701-8_23},
  doi          = {10.1007/978-3-030-88701-8_23},
  abstractnote = {In the literature on Kleene algebra, a number of variants have been proposed which impose additional structure specified by a theory, such as Kleene algebra with tests (KAT) and the recent Kleene algebra with observations (KAO), or make specific assumptions about certain constants, as for instance in NetKAT. Many of these variants fit within the unifying perspective offered by Kleene algebra with hypotheses, which comes with a canonical language model constructed from a given set of hypotheses. For the case of KAT, this model corresponds to the familiar interpretation of expressions as languages of guarded strings. A relevant question therefore is whether Kleene algebra together with a given set of hypotheses is complete with respect to its canonical language model. In this paper, we revisit, combine and extend existing results on this question to obtain tools for proving completeness in a modular way. We showcase these tools by reproving completeness of KAT and KAO, and prove completeness of a new variant of KAT where the collection of tests only forms a distributive lattice.},
  booktitle    = {Relational and Algebraic Methods in Computer Science: 19th International Conference, RAMiCS 2021, Marseille, France, November 2–5, 2021, Proceedings},
  publisher    = {Springer-Verlag},
  author       = {Pous, Damien and Rot, Jurriaan and Wagemaker, Jana},
  year         = {2021},
  month        = {Nov},
  pages        = {378–395}
}

@inbook{Kozen_Smith_1997,
  address      = {Berlin, Heidelberg},
  series       = {Lecture Notes in Computer Science},
  title        = {Kleene algebra with tests: Completeness and decidability},
  volume       = {1258},
  isbn         = {978-3-540-63172-9},
  url          = {http://link.springer.com/10.1007/3-540-63172-0_43},
  doi          = {10.1007/3-540-63172-0_43},
  abstractnote = {Kleene algebras with tests provide a rigorous framework for equational speci cation and veri cation. They have been used successfully in basic safety analysis, source-to-source program transformation, and concurrency control. We prove the completeness of the equational theory of Kleene algebra with tests and *-continuous Kleene algebra with tests over language-theoretic and relational models. We also show decidability. Cohen’s reduction of Kleene algebra with hypotheses of the form r = 0 to Kleene algebra without hypotheses is simpli ed and extended to handle Kleene algebras with tests.},
  booktitle    = {Computer Science Logic},
  publisher    = {Springer Berlin Heidelberg},
  author       = {Kozen, Dexter and Smith, Frederick},
  year         = {1997},
  pages        = {244–259},
  collection   = {Lecture Notes in Computer Science},
  language     = {en}
}

@article{Kozen_1994,
  title    = {A Completeness Theorem for Kleene Algebras and the Algebra of Regular Events},
  volume   = {110},
  issn     = {08905401},
  doi      = {10.1006/inco.1994.1037},
  number   = {2},
  journal  = {Information and Computation},
  author   = {Kozen, D.},
  year     = {1994},
  month    = {May},
  pages    = {366–390},
  language = {en}
}

@inproceedings{Doumane_Kuperberg_Pous_Pradic_2019,
  address      = {Prague, Czech Republic},
  series       = {Proc. FoSSaCS 2019},
  title        = {Kleene Algebra with Hypotheses},
  url          = {https://hal.archives-ouvertes.fr/hal-02021315},
  abstractnote = {We study the Horn theories of Kleene algebras and star continuous Kleene algebras, from the complexity point of view. While their equational theories coincide and are PSpace-complete, their Horn theories differ and are undecidable. We characterise the Horn theory of star continuous Kleene algebras in terms of downward closed languages and we show that when restricting the shape of allowed hypotheses, the problems lie in various levels of the arithmetical or analytical hierarchy. We also answer a question posed by Cohen about hypotheses of the form 1 = S where S is a sum of letters: we show that it is decidable.},
  booktitle    = {22nd International Conference on Foundations of Software Science and Computation Structures (FoSSaCS)},
  publisher    = {Springer},
  author       = {Doumane, Amina and Kuperberg, Denis and Pous, Damien and Pradic, Pierre},
  year         = {2019},
  collection   = {Proc. FoSSaCS 2019}
}

@inproceedings{Pous_Wagemaker_2022,
  address    = {Dagstuhl, Germany},
  series     = {Leibniz International Proceedings in Informatics (LIPIcs)},
  title      = {Completeness Theorems for Kleene Algebra with Top},
  volume     = {243},
  isbn       = {978-3-95977-246-4},
  issn       = {1868-8969},
  doi        = {10.4230/LIPIcs.CONCUR.2022.26},
  booktitle  = {33rd International Conference on Concurrency Theory (CONCUR 2022)},
  publisher  = {Schloss Dagstuhl – Leibniz-Zentrum für Informatik},
  author     = {Pous, Damien and Wagemaker, Jana},
  editor     = {Klin, Bartek and Lasota, Slawomir and Muscholl, Anca},
  year       = {2022},
  pages      = {26:1-26:18},
  collection = {Leibniz International Proceedings in Informatics (LIPIcs)}
}

@article{Pous_Wagemaker_2023,
  title        = {Completeness Theorems for Kleene algebra with tests and top},
  url          = {http://arxiv.org/abs/2304.07190},
  abstractnote = {We prove two completeness results for Kleene algebra with tests and a top element, with respect to guarded string languages and binary relations. While the equational theories of those two classes of models coincide over the signature of Kleene algebra, this is no longer the case when we consider an additional constant “top” for the full element. Indeed, the full relation satisﬁes more laws than the full language, and we show that those additional laws can all be derived from a single additional axiom. We recover that the two equational theories coincide if we slightly generalise the notion of relational model, allowing sub-algebras of relations where top is a greatest element but not necessarily the full relation. We use models of closed languages and reductions in order to prove our completeness results, which are relative to any axiomatisation of the algebra of regular events. For one of our constructions, we extend the concept of ﬁnite monoid recognisability to guarded-string languages; this device makes it possible to obtain a PSpace algorithm for the equational theory of binary relations.},
  note         = {arXiv:2304.07190 [cs]},
  number       = {arXiv:2304.07190},
  publisher    = {arXiv},
  author       = {Pous, Damien and Wagemaker, Jana},
  year         = {2023},
  month        = {Apr},
  language     = {en}
}


@article{Cohen_1995,
  title        = {Hypotheses in Kleene Algebra},
  abstractnote = {Kleene algebra (an Horn axiomatization of Kleene’s algebra of regular events) has proved to be an effective tool for reasoning about programs. Within the algebra, we can reason succinctly about both ordinary safety properties and important program transformations such as loop unwinding, change of data representation, and refinement of atomicity. One of the nice properties of Kleene algebra is that its equational theory has a simple decision procedure. However, to use it for programming applications, we need to reason in the presence of hypotheses stating the equality of certain programs; such hypotheses can, in general, render the theory undecidable. In this note, we show that for certain important cases, checking an equation under hypotheses can be reduced to checking a related equation without hypotheses. 1 Introduction A Kleene algebra (KA) is an algebraic structure (K; +; ; ; ; 0; 1) satisfying the following axioms (we use infix notation for + and ;, and postfix notation for , an...},
  author       = {Cohen, Ernie},
  year         = {1995},
  month        = {Mar}
}


@article{Cohen_Kozen_Smith_1999,
  title        = {The Complexity of Kleene Algebra with Tests},
  abstractnote = {Kleene algebras with tests provide a natural framework for equational specification and verification. Kleene algebras with tests and related systems have been used successfully in basic safety analysis, source-to-source program transformation, and concurrency control. The equational theory of Kleene algebras with tests has been shown to be decidable in at most exponential time by an efficient reduction to Propositional Dynamic Logic. In this paper we prove that the theory is PSPACE-complete. 1 Introduction Kleene algebra with tests (KAT) [15] is an algebraic system intermediate to Kleene algebra (KA) and Propositional Dynamic Logic (PDL) in expressive power. One can use KAT for a range of common verification tasks without resorting to the full power of PDL. KAT and related systems have been applied successfully to real problems in basic safety analysis, source-to-source 1 Bell Communications Research Inc., 445 South St., Morristown, NJ 07960, USA 2 Computer Science Department, Cor...},
  author       = {Cohen, Ernie and Kozen, Dexter and Smith, Frederick},
  year         = {1999},
  month        = {Jul}
}

 @inproceedings{Grathwohl_Kozen_Mamouras_2014,
  address      = {New York, NY, USA},
  series       = {CSL-LICS ’14},
  title        = {KAT + B!},
  isbn         = {978-1-4503-2886-9},
  url          = {https://doi.org/10.1145/2603088.2603095},
  doi          = {10.1145/2603088.2603095},
  abstractnote = {It is known that certain program transformations require a small amount of mutable state, a feature not explicitly provided by Kleene algebra with tests (KAT). In this paper we show how to axiomatically extend KAT with this extra feature in the form of mutable tests. The extension is conservative and is formulated as a general commutative coproduct construction. We give several results on deductive completeness and complexity of the system, as well as some examples of its use.},
  booktitle    = {Proceedings of the Joint Meeting of the Twenty-Third EACSL Annual Conference on Computer Science Logic (CSL) and the Twenty-Ninth Annual ACM/IEEE Symposium on Logic in Computer Science (LICS)},
  publisher    = {Association for Computing Machinery},
  author       = {Grathwohl, Niels Bjørn Bugge and Kozen, Dexter and Mamouras, Konstantinos},
  year         = {2014},
  month        = {Jul},
  pages        = {1–10},
  collection   = {CSL-LICS ’14}
}

 @inbook{Brunet_Pous_2014,
  address      = {Cham},
  series       = {Lecture Notes in Computer Science},
  title        = {Kleene Algebra with Converse},
  volume       = {8428},
  isbn         = {978-3-319-06250-1},
  url          = {http://link.springer.com/10.1007/978-3-319-06251-8_7},
  doi          = {10.1007/978-3-319-06251-8_7},
  abstractnote = {The equational theory generated by all algebras of binary relations with operations of union, composition, converse and reﬂexive transitive closure was studied by Bernátsky, Bloom, Ésik, and Stefanescu in 1995. We reformulate some of their proofs in syntactic and elementary terms, and we provide a new algorithm to decide the corresponding theory. This algorithm is both simpler and more eﬃcient; it relies on an alternative automata construction, that allows us to prove that the considered equational theory lies in the complexity class PSpace.},
  booktitle    = {Relational and Algebraic Methods in Computer Science},
  publisher    = {Springer International Publishing},
  author       = {Brunet, Paul and Pous, Damien},
  editor       = {Höfner, Peter and Jipsen, Peter and Kahl, Wolfram and Müller, Martin Eric},
  year         = {2014},
  pages        = {101–118},
  collection   = {Lecture Notes in Computer Science},
  language     = {en}
}

 @article{Desharnais_Möller_Struth_2006,
  title        = {Kleene algebra with domain},
  volume       = {7},
  issn         = {1529-3785},
  doi          = {10.1145/1183278.1183285},
  abstractnote = {We propose Kleene algebra with domain (KAD), an extension of Kleene algebra by simple equational axioms for a domain and a codomain operation. KAD considerably augments the expressiveness of Kleene algebra, in particular for the specification and analysis of programs and state transition systems. We develop the basic calculus, present the most interesting models and discuss some related theories. We demonstrate applicability by two examples: algebraic reconstructions of Noethericity and propositional Hoare logic based on equational reasoning.},
  number       = {4},
  journal      = {ACM Transactions on Computational Logic},
  author       = {Desharnais, Jules and Möller, Bernhard and Struth, Georg},
  year         = {2006},
  month        = {Oct},
  pages        = {798–833}
}

 @inproceedings{Kozen_Mamouras_2014,
  address      = {Berlin, Heidelberg},
  series       = {Lecture Notes in Computer Science},
  title        = {Kleene Algebra with Equations},
  isbn         = {978-3-662-43951-7},
  doi          = {10.1007/978-3-662-43951-7_24},
  abstractnote = {We identify sufficient conditions for the construction of free language models for systems of Kleene algebra with additional equations. The construction applies to a broad class of extensions of KA and provides a uniform approach to deductive completeness.},
  booktitle    = {Automata, Languages, and Programming},
  publisher    = {Springer},
  author       = {Kozen, Dexter and Mamouras, Konstantinos},
  editor       = {Esparza, Javier and Fraigniaud, Pierre and Husfeldt, Thore and Koutsoupias, Elias},
  year         = {2014},
  pages        = {280–292},
  collection   = {Lecture Notes in Computer Science},
  language     = {en}
}

 @article{Kappé_Brunet_Rot_Silva_Wagemaker_Zanasi_2019,
  title        = {Kleene Algebra with Observations},
  doi          = {10.4230/LIPIcs.CONCUR.2019.41},
  abstractnote = {Kleene algebra with tests (KAT) is an algebraic framework for reasoning about the control flow of sequential programs. Generalising KAT to reason about concurrent programs is not straightforward, because axioms native to KAT in conjunction with expected axioms for concurrency lead to an anomalous equation. In this paper, we propose Kleene algebra with observations (KAO), a variant of KAT, as an alternative foundation for extending KAT to a concurrent setting. We characterise the free model of KAO, and establish a decision procedure w.r.t. its equational theory.},
  note         = {arXiv: 1811.10401},
  journal      = {arXiv:1811.10401 [cs]},
  author       = {Kappé, Tobias and Brunet, Paul and Rot, Jurriaan and Silva, Alexandra and Wagemaker, Jana and Zanasi, Fabio},
  year         = {2019},
  pages        = {16 pages}
}

 @article{Antonopoulos_Koskinen_Le_Nagasamudram_Naumann_Ngo_2022,
  title        = {An algebra of alignment for relational verification},
  url          = {http://arxiv.org/abs/2202.04278},
  doi          = {10.48550/arXiv.2202.04278},
  abstractnote = {Relational verification encompasses information flow security, regression verification, translation validation for compilers, and more. Effective alignment of the programs and computations to be related facilitates use of simpler relational invariants which in turn enables automation and modular reasoning. Alignment has been explored in terms of trace pairs, deductive rules of relational Hoare logics (RHL), and several forms of product automata. This article shows how a simple extension of Kleene Algebra with Tests (KAT), called BiKAT, subsumes prior formulations, including alignment witnesses for forall-exists properties, which brings to light new RHL rules for such properties. Alignments can be discovered algorithmically or devised manually but, in either case, their adequacy with respect to the original programs must be proved; an explicit algebra enables constructive proof by equational reasoning. Furthermore our approach inherits algorithmic benefits from existing KAT-based techniques and tools, which are applicable to a range of semantic models.},
  note         = {arXiv:2202.04278 [cs]},
  number       = {arXiv:2202.04278},
  publisher    = {arXiv},
  author       = {Antonopoulos, Timos and Koskinen, Eric and Le, Ton Chanh and Nagasamudram, Ramana and Naumann, David A. and Ngo, Minh},
  year         = {2022},
  month        = {Jul}
}

 @article{Brunet_2019,
  title        = {A note on commutative Kleene algebra},
  url          = {http://arxiv.org/abs/1910.14381},
  doi          = {10.48550/arXiv.1910.14381},
  abstractnote = {In this paper we present a detailed proof of an important result of algebraic logic: namely that the free commutative Kleene algebra is the space of semilinear sets. The first proof of this result was proposed by Redko in 1964, and simplified and corrected by Pilling in his 1970 thesis. However, we feel that a new account of this proof is needed now. This result has acquired a particular importance in recent years, since it is a key component in the completeness proofs of several algebraic models of concurrent computations (bi-Kleene algebra, concurrent Kleene algebra...). To that effect, we present a new proof of this result.},
  note         = {arXiv:1910.14381 [cs]},
  number       = {arXiv:1910.14381},
  publisher    = {arXiv},
  author       = {Brunet, Paul},
  year         = {2019},
  month        = {Oct}
}

 @article{Möller_Struth_2006,
  series       = {Algebraic Methodology and Software Technology},
  title        = {Algebras of modal operators and partial correctness},
  volume       = {351},
  issn         = {0304-3975},
  doi          = {10.1016/j.tcs.2005.09.069},
  abstractnote = {Modal Kleene algebras are Kleene algebras enriched by forward and backward box and diamond operators. We formalise the symmetries of these operators as Galois connections, complementarities and dualities. We study their properties in the associated operator algebras and show that the axioms of relation algebra are theorems at the operator level. Modal Kleene algebras provide a unifying semantics for various program calculi and enhance efficient cross-theory reasoning in this class, often in a very concise pointfree style. This claim is supported by novel algebraic soundness and completeness proofs for Hoare logic and by connecting this formalism with an algebraic decision procedure.},
  number       = {2},
  journal      = {Theoretical Computer Science},
  author       = {Möller, Bernhard and Struth, Georg},
  year         = {2006},
  month        = {Feb},
  pages        = {221–239},
  collection   = {Algebraic Methodology and Software Technology},
  language     = {en}
}

 @inbook{Kappé_Brunet_Silva_Wagemaker_Zanasi_2020,
  address      = {Cham},
  series       = {Lecture Notes in Computer Science},
  title        = {Concurrent Kleene Algebra with Observations: From Hypotheses to Completeness},
  volume       = {12077},
  isbn         = {978-3-030-45230-8},
  url          = {http://link.springer.com/10.1007/978-3-030-45231-5_20},
  doi          = {10.1007/978-3-030-45231-5_20},
  abstractnote = {Concurrent Kleene Algebra (CKA) extends basic Kleene algebra with a parallel composition operator, which enables reasoning about concurrent programs. However, CKA fundamentally misses tests, which are needed to model standard programming constructs such as conditionals and while-loops. It turns out that integrating tests in CKA is subtle, due to their interaction with parallelism. In this paper we provide a solution in the form of Concurrent Kleene Algebra with Observations (CKAO). Our main contribution is a completeness theorem for CKAO. Our result resorts on a more general study of CKA “with hypotheses”, of which CKAO turns out to be an instance: this analysis is of independent interest, as it can be applied to extensions of CKA other than CKAO.},
  booktitle    = {Foundations of Software Science and Computation Structures},
  publisher    = {Springer International Publishing},
  author       = {Kappé, Tobias and Brunet, Paul and Silva, Alexandra and Wagemaker, Jana and Zanasi, Fabio},
  editor       = {Goubault-Larrecq, Jean and König, Barbara},
  year         = {2020},
  pages        = {381–400},
  collection   = {Lecture Notes in Computer Science},
  language     = {en}
}

@inproceedings{Pratt_1980,
  address      = {New York, NY, USA},
  series       = {STOC ’80},
  title        = {Dynamic algebras and the nature of induction},
  isbn         = {978-0-89791-017-0},
  url          = {https://doi.org/10.1145/800141.804649},
  doi          = {10.1145/800141.804649},
  abstractnote = {Dynamic algebras constitute the variety (equationally defined class) of models of the Segerberg axioms for propositional dynamic logic. We obtain the following results (to within inseparability). (i) In any dynamic algebra * is reflexive transitive closure. (ii) Every free dynamic algebra can be factored into finite dynamic algebras. (iii) Every finite dynamic algebra is isomorphic to a Kripke structure. (ii) and (iii) imply Parikh’s completeness theorem for the Segerberg axioms. We also present an approach to treating the inductive aspect of recursion within dynamic algebras.},
  booktitle    = {Proceedings of the twelfth annual ACM symposium on Theory of computing},
  publisher    = {Association for Computing Machinery},
  author       = {Pratt, V. R.},
  year         = {1980},
  month        = {Apr},
  pages        = {22–28},
  collection   = {STOC ’80}
}

@article{Struth_2015,
  title        = {On the Expressive Power of Kleene Algebra with Domain},
  url          = {http://arxiv.org/abs/1507.07246},
  abstractnote = {It is shown that antidomain semirings are more expressive than test semirings and that Kleene algebras with domain are more expressive than Kleene algebras with tests. It is also shown that Kleene algebras with domain are expressive for propositional Hoare logic whereas Kleene algebras with tests are not.},
  note         = {arXiv:1507.07246 [cs]},
  number       = {arXiv:1507.07246},
  publisher    = {arXiv},
  author       = {Struth, Georg},
  year         = {2015},
  month        = {Aug},
  language     = {en}
}

@inproceedings{Desharnais_Möller_Struth_2004,
  title        = {Modal Kleene Algebra and Applications – A Survey},
  abstractnote = {Modal Kleene algebras are Kleene algebras with forward and backward modal  operators, defined via domain and codomain operations. They provide a concise and convenient  algebraic framework that subsumes various popular calculi and allows treating  quite a number of areas. We survey the basic theory and some prominent applications. These include},
  booktitle    = {Journal on Relational Methods in Computer Science},
  author       = {Desharnais, Jules and Möller, Bernhard and Struth, Georg},
  year         = {2004},
  pages        = {93–131}
}

@article{Desharnais_Struth_2011,
  series       = {Special issue on the Mathematics of Program Construction (MPC 2008)},
  title        = {Internal axioms for domain semirings},
  volume       = {76},
  issn         = {0167-6423},
  doi          = {10.1016/j.scico.2010.05.007},
  abstractnote = {New axioms for domain operations on semirings and Kleene algebras are proposed. They generalise the relational notion of domain–the set of all states that are related to some other state–to a wide range of models. They are internal since the algebras of state spaces are induced by the domain axioms. They are simpler and conceptually more appealing than previous two-sorted external approaches in which the domain algebra is determined through typing. They lead to a simple and natural algebraic approach to modal logics based on equational reasoning. The axiomatisations have been developed in a new style of computer-enhanced mathematics by automated theorem proving, and the approach itself is suitable for automated systems analysis and verification. This is demonstrated by a fully automated proof of a modal correspondence result for Löb’s formula that has applications in termination analysis.},
  number       = {3},
  journal      = {Science of Computer Programming},
  author       = {Desharnais, Jules and Struth, Georg},
  year         = {2011},
  month        = {Mar},
  pages        = {181–203},
  collection   = {Special issue on the Mathematics of Program Construction (MPC 2008)},
  language     = {en}
}

@article{Fahrenberg_Johansen_Struth_Ziemiánski_2021,
  title        = {Domain Semirings United},
  url          = {http://arxiv.org/abs/2011.04704},
  abstractnote = {Domain operations on semirings have been axiomatised in two diﬀerent ways: by a map from an additively idempotent semiring into a boolean subalgebra of the semiring bounded by the additive and multiplicative unit of the semiring, or by an endofunction on a semiring that induces a distributive lattice bounded by the two units as its image. This note presents classes of semirings where these approaches coincide.},
  note         = {arXiv: 2011.04704},
  journal      = {arXiv:2011.04704 [cs]},
  author       = {Fahrenberg, Uli and Johansen, Christian and Struth, Georg and Ziemiánski, Krzysztof},
  year         = {2021},
  month        = {Mar},
  language     = {en}
}

@inproceedings{Sedlár_2023,
  address      = {Berlin, Heidelberg},
  title        = {On the Complexity of Kleene Algebra with Domain},
  isbn         = {978-3-031-28082-5},
  url          = {https://doi.org/10.1007/978-3-031-28083-2_13},
  doi          = {10.1007/978-3-031-28083-2_13},
  abstractnote = {We prove that the equational theory of Kleene algebra with domain is EXPTIME-complete. Our proof makes essential use of Hollenberg’s equational axiomatization of program equations valid in relational test algebra. We also show that the equational theory of Kleene algebra with domain coincides with the equational theory of *-continuous Kleene algebra with domain.},
  booktitle    = {Relational and Algebraic Methods in Computer Science: 20th International Conference, RAMiCS 2023, Augsburg, Germany, April 3–6, 2023, Proceedings},
  publisher    = {Springer-Verlag},
  author       = {Sedlár, Igor},
  year         = {2023},
  month        = {Apr},
  pages        = {208–223}
}

@inbook{Möller_O’Hearn_Hoare_2021,
  address      = {Cham},
  series       = {Lecture Notes in Computer Science},
  title        = {On Algebra of Program Correctness and Incorrectness},
  volume       = {13027},
  isbn         = {978-3-030-88700-1},
  url          = {https://link.springer.com/10.1007/978-3-030-88701-8_20},
  doi          = {10.1007/978-3-030-88701-8_20},
  abstractnote = {Variants of Kleene algebra have been used to provide foundations of reasoning about programs, for instance by representing Hoare Logic (HL) in algebra. That work has generally emphasised program correctness, i.e., proving the absence of bugs. Recently, Incorrectness Logic (IL) has been advanced as a formalism for the dual problem: proving the presence of bugs. IL is intended to underpin the use of logic in program testing and static bug ﬁnding. Here, we use a Kleene algebra with diamond operators and countable joins of tests, which embeds IL, and which also is complete for reasoning about the image of the embedding. Next to embedding IL, the algebra is able to embed HL, and allows making connections between IL and HL speciﬁcations. In this sense, it uniﬁes correctness and incorrectness reasoning in one formalism.},
  booktitle    = {Relational and Algebraic Methods in Computer Science},
  publisher    = {Springer International Publishing},
  author       = {Möller, Bernhard and O’Hearn, Peter and Hoare, Tony},
  editor       = {Fahrenberg, Uli and Gehrke, Mai and Santocanale, Luigi and Winter, Michael},
  year         = {2021},
  pages        = {325–343},
  collection   = {Lecture Notes in Computer Science},
  language     = {en}
}


@article{Kozen_1997,
  title        = {Kleene algebra with tests},
  volume       = {19},
  issn         = {0164-0925},
  doi          = {10.1145/256167.256195},
  abstractnote = {We introduce Kleene algebra with tests, an equational system for manipulating programs. We give a purely equational proof, using Kleene algebra with tests and commutativity conditions, of the following classical result: every while program can be simulated by a while program can be simulated by a while program with at most one while loop. The proof illustrates the use of Kleene algebra with tests and commutativity conditions in program equivalence proofs.},
  number       = {3},
  journal      = {ACM Transactions on Programming Languages and Systems},
  author       = {Kozen, Dexter},
  year         = {1997},
  month        = {May},
  pages        = {427–443}
}

@article{Kozen_2000,
  title        = {On Hoare logic and Kleene algebra with tests},
  volume       = {1},
  issn         = {1529-3785},
  doi          = {10.1145/343369.343378},
  abstractnote = {We show that Kleene algebra with tests (KAT) subsumes propositional Hoare logic (PHL). Thus the specialized syntax and deductive apparatus of Hoare logic are inessential and can be replaced by simple equational reasoning. In addition, we show that all relationally valid inference rules are derivable in KAT and that deciding the relational validity of such rules is PSPACE-complete.},
  number       = {1},
  journal      = {ACM Transactions on Computational Logic},
  author       = {Kozen, Dexter},
  year         = {2000},
  month        = {Jul},
  pages        = {60–76}
}

@book{Manes_Arbib_1986,
  address   = {New York, NY},
  title     = {Algebraic Approaches to Program Semantics},
  isbn      = {978-1-4612-9377-4},
  note      = {Open Library ID: OL27015833M},
  publisher = {Springer New York},
  author    = {Manes, Ernest G. and Arbib, Michael A.},
  year      = {1986},
  language  = {eng}
}

@article{OHearn_2020,
  title        = {Incorrectness logic},
  volume       = {4},
  issn         = {2475-1421, 2475-1421},
  doi          = {10.1145/3371078},
  abstractnote = {PETER W. O’HEARN, Facebook and University College London, UK 10 Program correctness and incorrectness are two sides of the same coin. As a programmer, even if you would like to have correctness, you might find yourself spending most of your time reasoning about incorrectness. This includes informal reasoning that people do while looking at or thinking about their code, as well as that supported by automated testing and static analysis tools. This paper describes a simple logic for program incorrectness which is, in a sense, the other side of the coin to Hoare’s logic of correctness. CCS Concepts: · Theory of computation → Programming logic.},
  number       = {POPL},
  journal      = {Proceedings of the ACM on Programming Languages},
  author       = {O’Hearn, Peter W.},
  year         = {2020},
  month        = {Jan},
  pages        = {1–32},
  language     = {en}
}

 @inbook{Raad_Berdine_Dang_Dreyer_OHearn_Villard_2020,
  address      = {Cham},
  series       = {Lecture Notes in Computer Science},
  title        = {Local Reasoning About the Presence of Bugs: Incorrectness Separation Logic},
  volume       = {12225},
  isbn         = {978-3-030-53290-1},
  url          = {http://link.springer.com/10.1007/978-3-030-53291-8_14},
  doi          = {10.1007/978-3-030-53291-8_14},
  abstractnote = {There has been a large body of work on local reasoning for proving the absence of bugs, but none for proving their presence. We present a new formal framework for local reasoning about the presence of bugs, building on two complementary foundations: 1) separation logic and 2) incorrectness logic. We explore the theory of this new incorrectness separation logic (ISL), and use it to derive a begin-anywhere, intraprocedural symbolic execution analysis that has no false positives by construction. In so doing, we take a step towards transferring modular, scalable techniques from the world of program veriﬁcation to bug catching.},
  booktitle    = {Computer Aided Verification},
  publisher    = {Springer International Publishing},
  author       = {Raad, Azalea and Berdine, Josh and Dang, Hoang-Hai and Dreyer, Derek and O’Hearn, Peter and Villard, Jules},
  editor       = {Lahiri, Shuvendu K. and Wang, Chao},
  year         = {2020},
  pages        = {225–252},
  collection   = {Lecture Notes in Computer Science},
  language     = {en}
}

@article{Le_Raad_Villard_Berdine_Dreyer_OHearn_2022,
  title        = {Finding real bugs in big programs with incorrectness logic},
  volume       = {6},
  issn         = {2475-1421},
  doi          = {10.1145/3527325},
  abstractnote = {Incorrectness Logic (IL) has recently been advanced as a logical theory for compositionally proving the presence of bugs—dual to Hoare Logic, which is used to compositionally prove their absence. Though IL was motivated in large part by the aim of providing a logical foundation for bug-catching program analyses, it has remained an open question: is IL useful only retrospectively (to explain existing analyses), or can it actually be useful in developing new analyses which can catch real bugs in big programs?
                  In this work, we develop Pulse-X, a new, automatic program analysis for catching memory errors, based on ISL, a recent synthesis of IL and separation logic. Using Pulse-X, we have found 15 new real bugs in OpenSSL, which we have reported to OpenSSL maintainers and have since been fixed. In order not to be overwhelmed with potential but false error reports, we develop a compositional bug-reporting criterion based on a distinction between latent and manifest errors, which references the under-approximate ISL abstractions computed by Pulse-X, and we investigate the fix rate resulting from application of this criterion. Finally, to probe the potential practicality of our bug-finding method, we conduct a comparison to Infer, a widely used analyzer which has proven useful in industrial engineering practice.},
  number       = {OOPSLA1},
  journal      = {Proceedings of the ACM on Programming Languages},
  author       = {Le, Quang Loc and Raad, Azalea and Villard, Jules and Berdine, Josh and Dreyer, Derek and O’Hearn, Peter W.},
  year         = {2022},
  month        = {Apr},
  pages        = {1–27},
  language     = {en}
}

 @inbook{Kozen_1990,
  address      = {Berlin/Heidelberg},
  series       = {Lecture Notes in Computer Science},
  title        = {On kleene algebras and closed semirings},
  volume       = {452},
  isbn         = {978-3-540-52953-8},
  url          = {http://link.springer.com/10.1007/BFb0029594},
  doi          = {10.1007/BFb0029594},
  abstractnote = {Kleene algebras are an important class of algebraic structures that arise in diverse areas of computer science: program logic and semantics, relational algebra, automata theory, and the design and analysis of algorithms. The literature contains several inequivalent deﬁnitions of Kleene algebras and related algebraic structures [2, 14, 15, 5, 6, 1, 10, 7].},
  booktitle    = {Mathematical Foundations of Computer Science 1990},
  publisher    = {Springer-Verlag},
  author       = {Kozen, Dexter},
  editor       = {Rovan, Branislav},
  year         = {1990},
  pages        = {26–47},
  collection   = {Lecture Notes in Computer Science},
  language     = {en}
}

 @inbook{Mamouras_2017,
  address      = {Berlin, Heidelberg},
  series       = {Lecture Notes in Computer Science},
  title        = {Equational Theories of Abnormal Termination Based on Kleene Algebra},
  volume       = {10203},
  isbn         = {978-3-662-54457-0},
  url          = {http://link.springer.com/10.1007/978-3-662-54458-7_6},
  doi          = {10.1007/978-3-662-54458-7_6},
  abstractnote = {We study at an abstract level imperative while programs with an explicit fail operation that causes abnormal termination or irreparable failure, and a try-catch operation for error handling. There are two meaningful ways to deﬁne the semantics of such programs, depending on whether the ﬁnal state of the computation can be observed upon failure or not. These two semantics give rise to diﬀerent equational theories. We investigate these two theories in the abstract framework of Kleene algebra, and we propose two simple and intuitive equational axiomatizations. We prove very general conservativity results, from which we also obtain decidability and deductive completeness of each of our calculi with respect to the intended semantics.},
  booktitle    = {Foundations of Software Science and Computation Structures},
  publisher    = {Springer Berlin Heidelberg},
  author       = {Mamouras, Konstantinos},
  editor       = {Esparza, Javier and Murawski, Andrzej S.},
  year         = {2017},
  pages        = {88–105},
  collection   = {Lecture Notes in Computer Science},
  language     = {en}
}

 @article{Anderson_Foster_Guha_Jeannin_Kozen_Schlesinger_Walker_2014,
  title        = {NetKAT: semantic foundations for networks},
  volume       = {49},
  issn         = {0362-1340},
  doi          = {10.1145/2578855.2535862},
  abstractnote = {Recent years have seen growing interest in high-level languages for programming networks. But the design of these languages has been largely ad hoc, driven more by the needs of applications and the capabilities of network hardware than by foundational principles. The lack of a semantic foundation has left language designers with little guidance in determining how to incorporate new features, and programmers without a means to reason precisely about their code. This paper presents NetKAT, a new network programming language that is based on a solid mathematical foundation and comes equipped with a sound and complete equational theory. We describe the design of NetKAT, including primitives for filtering, modifying, and transmitting packets; union and sequential composition operators; and a Kleene star operator that iterates programs. We show that NetKAT is an instance of a canonical and well-studied mathematical structure called a Kleene algebra with tests (KAT) and prove that its equational theory is sound and complete with respect to its denotational semantics. Finally, we present practical applications of the equational theory including syntactic techniques for checking reachability, proving non-interference properties that ensure isolation between programs, and establishing the correctness of compilation algorithms.},
  number       = {1},
  journal      = {ACM SIGPLAN Notices},
  author       = {Anderson, Carolyn Jane and Foster, Nate and Guha, Arjun and Jeannin, Jean-Baptiste and Kozen, Dexter and Schlesinger, Cole and Walker, David},
  year         = {2014},
  month        = {Jan},
  pages        = {113–126}
}

 @inproceedings{Struth_2002,
  address      = {Berlin, Heidelberg},
  series       = {Lecture Notes in Computer Science},
  title        = {Calculating Church-Rosser Proofs in Kleene Algebra},
  isbn         = {978-3-540-36280-7},
  doi          = {10.1007/3-540-36280-0_19},
  abstractnote = {We present simple calculational proofs of Church-Rosser theorems for equational theories, quasiorderings and non-symmetric transitive relations in Kleene algebra. We also calculate the abstract part of two standard proofs of Church-Rosser theorems in the λ-calculus and further central statements of rewriting. Since proofs avoid deduction, in particular induction, and large parts are amenable to automata, the approach is suited for mechanization. Since proofs algebraically reconstruct precisely the usual diagrams, they are also very natural for a human. In all considerations, Kleene algebra is an excellent means of abstraction.},
  booktitle    = {Relational Methods in Computer Science},
  publisher    = {Springer},
  author       = {Struth, Georg},
  editor       = {de Swart, Harrie C. M.},
  year         = {2002},
  pages        = {276–290},
  collection   = {Lecture Notes in Computer Science},
  language     = {en}
}

@inproceedings{Kleene_1956,
  title        = {Representation of Events in Nerve Nets and Finite Automata},
  isbn         = {978-1-4008-8261-8},
  url          = {https://www.degruyter.com/document/doi/10.1515/9781400882618-002/html},
  doi          = {10.1515/9781400882618-002},
  abstractnote = {Abstract: To what kinds of events can a McCulloch-Pitts nerve net respond by firing a certain neuron? More generally, to what kinds of events can any finite automaton respond by assuming one of certain states? This memorandum is devoted to an elementary exposition of the problems and of results obtained on it during investigations in August 1951.},
  note         = {Book Title: Automata Studies. (AM-34)
                  DOI: 10.1515/9781400882618-002},
  publisher    = {Princeton University Press},
  author       = {Kleene, S. C.},
  editor       = {Shannon, C. E. and McCarthy, J.},
  year         = {1956},
  month        = {Dec},
  pages        = {3–42}
}

 @book{Conway_2012,
  title        = {Regular Algebra and Finite Machines},
  isbn         = {978-0-486-48583-6},
  abstractnote = {World-famous mathematician John H. Conway based this classic text on a 1966 course he taught at Cambridge University. Geared toward graduate students of mathematics, it will also prove a valuable guide to researchers and professional mathematicians. His topics cover Moore&#39;s theory of experiments, Kleene&#39;s theory of regular events and expressions, Kleene algebras, the differential calculus of events, factors and the factor matrix, and the theory of operators. Additional subjects include event classes and operator classes, some regulator algebras, context-free languages, communicative regular algebra, axiomatic questions, the strength of classical axioms, and logical problems. Complete solutions to problems appear at the end.},
  note         = {Google-Books-ID: 1KAXc5TpEV8C},
  publisher    = {Courier Corporation},
  author       = {Conway, John Horton},
  year         = {2012},
  month        = {Jan},
  language     = {en}
}

@article{redko_1964,
  title   = {On the algebra of commutative events},
  author  = {Redko, VN},
  journal = {Ukrain. Mat},
  volume  = {16},
  pages   = {185--195},
  year    = {1964}
}

 @article{Krob_1991,
  title    = {Complete systems ofB-rational identities},
  volume   = {89},
  issn     = {0304-3975},
  doi      = {10.1016/0304-3975(91)90395-I},
  number   = {2},
  journal  = {Theoretical Computer Science},
  author   = {Krob, Daniel},
  year     = {1991},
  month    = {Oct},
  pages    = {207–343},
  language = {en}
}

 @article{Boffa_1990,
  title        = {Une remarque sur les systèmes complets d’identités rationnelles},
  volume       = {24},
  issn         = {0988-3754, 1290-385X},
  doi          = {10.1051/ita/1990240404191},
  abstractnote = {Completeness questions of Conway and Salomaa are linked by means of a very simple déductive rule.},
  number       = {4},
  journal      = {RAIRO - Theoretical Informatics and Applications},
  author       = {Boffa, Maurice},
  year         = {1990},
  pages        = {419–423},
  language     = {fr}
}

 @book{Hopcroft_Ullman_1979,
  title        = {Introduction to Automata Theory, Languages, and Computation},
  isbn         = {978-0-201-02988-8},
  abstractnote = {Preliminaries. Finite automata and regular expressions. Properties of regular sets. Context-free grammars. Pushdown automata; Properties of context-free languages. Turing machines. Undecidability. The Cohmsky hierarchy. Heterministic context-free languages. Closure properties of families of languages. Computational complexity theory. Intractable problems. Highlights of other important language classes.},
  publisher    = {Addison-Wesley},
  author       = {Hopcroft, John E. and Ullman, Jeffrey D.},
  year         = {1979},
  language     = {en}
}

 @inbook{Kozen_2001,
  address      = {Berlin, Heidelberg},
  series       = {Lecture Notes in Computer Science},
  title        = {Myhill-Nerode Relations on Automatic Systems and the Completeness of Kleene Algebra},
  volume       = {2010},
  isbn         = {978-3-540-41695-1},
  url          = {http://link.springer.com/10.1007/3-540-44693-1_3},
  doi          = {10.1007/3-540-44693-1_3},
  abstractnote = {It is well known that ﬁnite square matrices over a Kleene algebra again form a Kleene algebra. This is also true for inﬁnite matrices under suitable restrictions. One can use this fact to solve certain inﬁnite systems of inequalities over a Kleene algebra. Automatic systems are a special class of inﬁnite systems that can be viewed as inﬁnite-state automata. Automatic systems can be collapsed using Myhill–Nerode relations in much the same way that ﬁnite automata can. The Brzozowski derivative on an algebra of polynomials over a Kleene algebra gives rise to a triangular automatic system that can be solved using these methods. This provides an alternative method for proving the completeness of Kleene algebra.},
  booktitle    = {STACS 2001},
  publisher    = {Springer Berlin Heidelberg},
  author       = {Kozen, Dexter},
  editor       = {Ferreira, Afonso and Reichel, Horst},
  year         = {2001},
  pages        = {27–38},
  collection   = {Lecture Notes in Computer Science},
  language     = {en}
}

 @book{Silva_2010,
  address   = {S.l.; Nijmegen},
  title     = {Kleene coalgebra},
  isbn      = {978-90-6464-433-7},
  url       = {http://hdl.handle.net/2066/83205},
  publisher = {s.n.] ; UB Nijmegen [host},
  author    = {Silva, A.M},
  year      = {2010},
  language  = {en}
}

 @article{Kozen_Silva_2020,
  series       = {In memory of Maurice Nivat, a founding father of Theoretical Computer Science - Part II},
  title        = {Left-handed completeness},
  volume       = {807},
  issn         = {0304-3975},
  doi          = {10.1016/j.tcs.2019.10.040},
  abstractnote = {We give a new proof of the completeness of the left-handed star rule of Kleene algebra. The proof is significantly shorter than previous proofs and exposes the rich interaction of algebra and coalgebra in the theory of Kleene algebra.},
  journal      = {Theoretical Computer Science},
  author       = {Kozen, Dexter and Silva, Alexandra},
  year         = {2020},
  month        = {Feb},
  pages        = {220–233},
  collection   = {In memory of Maurice Nivat, a founding father of Theoretical Computer Science - Part II},
  language     = {en}
}

 @article{Das_Doumane_Pous,
  title        = {Left-Handed Completeness via Cyclic Proofs},
  abstractnote = {We give a new proof that the axioms of left-handed Kleene algebra are complete with respect to language containments. This proof is signiﬁcantly simpler than both the proof of Boﬀa (which relies on Krob’s completeness result), and the more recent proof of Kozen and Silva. Our proof builds on a recent non-wellfounded sequent calculus which makes it possible to explicitly compute the invariants required for left-handed Kleene algebra.},
  author       = {Das, Anupam and Doumane, Amina and Pous, Damien},
  language     = {en}
}

 @article{Hoare_van_Staden_Möller_Struth_Zhu_2016,
  series       = {Relational and algebraic methods in computer science},
  title        = {Developments in concurrent Kleene algebra},
  volume       = {85},
  issn         = {2352-2208},
  doi          = {10.1016/j.jlamp.2015.09.012},
  abstractnote = {This report summarises the background and recent progress in the research of its co-authors. It is aimed at the construction of links between algebraic presentations of the principles of programming and the exploitation of concurrency in modern programming practice. The signature and laws of a Concurrent Kleene Algebra (CKA) largely overlap with those of a Regular Algebra, with the addition of concurrent composition and a few simple laws for it. They are re-interpreted here in application to computer programs. The inclusion relation for regular expressions is re-interpreted as a refinement ordering, which supports a stepwise contractual approach to software system design and to program debugging. The laws are supported by a hierarchy of models, applicable and adaptable to a range of different purposes and to a range of different programming languages. The algebra is presented in three tiers. The bottom tier defines traces of program execution, represented as sets of events that have occurred in a particular run of a program; the middle tier defines a program as the set of traces of all its possible behaviours. The top tier introduces additional incomputable operators, which are useful for describing the desired or undesired properties of computer program behaviour. The final sections outline directions in which further research is needed.},
  number       = {4},
  journal      = {Journal of Logical and Algebraic Methods in Programming},
  author       = {Hoare, Tony and van Staden, Stephan and Möller, Bernhard and Struth, Georg and Zhu, Huibiao},
  year         = {2016},
  month        = {Jun},
  pages        = {617–636},
  collection   = {Relational and algebraic methods in computer science},
  language     = {en}
}

 @inproceedings{Kappé_Brunet_Silva_Zanasi_2018,
  address      = {Cham},
  series       = {Lecture Notes in Computer Science},
  title        = {Concurrent Kleene Algebra: Free Model and Completeness},
  isbn         = {978-3-319-89884-1},
  doi          = {10.1007/978-3-319-89884-1_30},
  abstractnote = {Concurrent Kleene Algebra (CKA) was introduced by Hoare, Moeller, Struth and Wehrman in 2009 as a framework to reason about concurrent programs. We prove that the axioms for CKA with bounded parallelism are complete for the semantics proposed in the original paper; consequently, these semantics are the free model for this fragment. This result settles a conjecture of Hoare and collaborators. Moreover, the technique developed to this end allows us to establish a Kleene Theorem for CKA, extending an earlier Kleene Theorem for a fragment of CKA.},
  booktitle    = {Programming Languages and Systems},
  publisher    = {Springer International Publishing},
  author       = {Kappé, Tobias and Brunet, Paul and Silva, Alexandra and Zanasi, Fabio},
  editor       = {Ahmed, Amal},
  year         = {2018},
  pages        = {856–882},
  collection   = {Lecture Notes in Computer Science},
  language     = {en}
}

 @article{Hardin_Kozen,
  title        = {On the Elimination of Hypotheses in Kleene Algebra with Tests},
  abstractnote = {The validity problem for certain universal Horn formulas of Kleene algebra with tests (KAT) can be efﬁciently reduced to the equational theory. This reduction is known as elimination of hypotheses. Hypotheses are used to describe the interaction of atomic programs and tests and are an essential component of practical program veriﬁcation with KAT. The ability to eliminate hypotheses of a certain form means that the Horn theory with premises of that form remains decidable in PSPACE. It was known (Cohen 1994, Kozen and Smith 1996, Kozen 1997) how to eliminate hypotheses of the form q = 0. In this paper we show how to eliminate hypotheses of the form cp = c for atomic p. Hypotheses of this form are useful in eliminating redundant code and arise quite often in the veriﬁcation of compiler optimizations (Kozen and Patron 2000).},
  author       = {Hardin, Chris and Kozen, Dexter},
  language     = {en}
}

 @book{Angus_Kozen_2001,
  address      = {USA},
  type         = {Technical Report},
  title        = {Kleene Algebra with Tests and Program Schematology},
  abstractnote = {The theory of flowchart schemes has a rich history going back to Ianov (1960); see Manna (1974) for an elementary exposition. A central question in the theory of program schemes is scheme equivalence. Manna presents several examples of equivalence proofs that work by simplifying the schemes using various combinatorial transformation rules. In this paper we present a purely algebraic approach to this problem using Kleene algebra with tests (KAT). Instead of transforming schemes directly using combinatorial graph manipulation, we regard them as a certain kind of automaton on abstract traces. We prove a generalization of Kleene’’s theorem and use it to construct equivalent expressions in the language of KAT. We can then give a purely equational proof of the equivalence of the resulting expressions. We prove soundness of the method and give a detailed example of its use.},
  institution  = {Cornell University},
  author       = {Angus, Allegra and Kozen, Dexter},
  year         = {2001},
  month        = {Jun}
}

 @inproceedings{Kozen_Patron_2000,
  address      = {Berlin, Heidelberg},
  series       = {Lecture Notes in Computer Science},
  title        = {Certification of Compiler Optimizations Using Kleene Algebra with Tests},
  volume       = {1861},
  isbn         = {978-3-540-67797-0},
  url          = {http://link.springer.com/10.1007/3-540-44957-4_38},
  doi          = {10.1007/3-540-44957-4_38},
  abstractnote = {We use Kleene algebra with tests to verify a wide assortment of common compiler optimizations, including dead code elimination, common subexpression elimination, copy propagation, loop hoisting, induction variable elimination, instruction scheduling, algebraic simplification, loop unrolling, elimination of redundant instructions, array bounds check elimination, and introduction of sentinels. In each of these cases, we give a formal equational proof of the correctness of the optimizing transformation.},
  publisher    = {Springer Berlin Heidelberg},
  author       = {Kozen, Dexter and Patron, Maria-Cristina},
  editor       = {Lloyd, John and Dahl, Veronica and Furbach, Ulrich and Kerber, Manfred and Lau, Kung-Kiu and Palamidessi, Catuscia and Pereira, Luís Moniz and Sagiv, Yehoshua and Stuckey, Peter J.},
  year         = {2000},
  pages        = {568–582},
  collection   = {Lecture Notes in Computer Science},
  language     = {en}
}

 @inbook{Kozen_1996,
  address      = {Berlin, Heidelberg},
  series       = {Lecture Notes in Computer Science},
  title        = {Kleene algebra with tests and commutativity conditions},
  volume       = {1055},
  isbn         = {978-3-540-61042-7},
  url          = {http://link.springer.com/10.1007/3-540-61042-1_35},
  doi          = {10.1007/3-540-61042-1_35},
  abstractnote = {We give an equational proof, using Kleene algebra with tests and commutativity conditions, of the following classical result: every while program can be simulated by a while program with at most one while loop. The proof illustrates the use of Kleene algebra with extra conditions in program equivalence proofs. We also show, using a construction of Cohen, that the universal Horn theory of *-continuous Kleene algebras is not finitely axiomatizable.},
  booktitle    = {Tools and Algorithms for the Construction and Analysis of Systems},
  publisher    = {Springer Berlin Heidelberg},
  author       = {Kozen, Dexter},
  editor       = {Margaria, Tiziana and Steffen, Bernhard},
  year         = {1996},
  pages        = {14–33},
  collection   = {Lecture Notes in Computer Science},
  language     = {en}
}


 @article{Kozen_2002,
  title    = {On the Complexity of Reasoning in Kleene Algebra},
  volume   = {179},
  issn     = {08905401},
  doi      = {10.1006/inco.2001.2960},
  number   = {2},
  journal  = {Information and Computation},
  author   = {Kozen, Dexter},
  year     = {2002},
  month    = {Dec},
  pages    = {152–162},
  language = {en}
}

 @inproceedings{Kozen_Tseng_2008,
  address      = {Berlin, Heidelberg},
  series       = {Lecture Notes in Computer Science},
  title        = {The Böhm–Jacopini Theorem Is False, Propositionally},
  volume       = {5133},
  isbn         = {978-3-540-70593-2},
  issn         = {0302-9743, 1611-3349},
  url          = {http://link.springer.com/10.1007/978-3-540-70594-9_11},
  doi          = {10.1007/978-3-540-70594-9_11},
  abstractnote = {The Bohm---Jacopini theorem (Bohm and Jacopini, 1966) is a classical result of program schematology. It states that any deterministic flowchart program is equivalent to a while program. The theorem is usually formulated at the first-order interpreted or first-order uninterpreted (schematic) level, because the construction requires the introduction of auxiliary variables. Ashcroft and Manna (1972) and Kosaraju (1973) showed that this is unavoidable. As observed by a number of authors, a slightly more powerful structured programming construct, namely loop programs with multi-level breaks, is sufficient to represent all deterministic flowcharts without introducing auxiliary variables. Kosaraju (1973) established a strict hierarchy determined by the maximum depth of nesting allowed. In this paper we give a purely propositional account of these results. We reformulate the problems at the propositional level in terms of automata on guarded strings, the automata-theoretic counterpart to Kleene algebra with tests. Whereas the classical approaches do not distinguish between first-order and propositional levels of abstraction, we find that the purely propositional formulation allows a more streamlined mathematical treatment, using algebraic and topological concepts such as bisimulation and coinduction. Using these tools, we can give more mathematically rigorous formulations and simpler and more revealing proofs.},
  publisher    = {Springer Berlin Heidelberg},
  author       = {Kozen, Dexter and Tseng, Wei-Lung Dustin},
  editor       = {Audebaud, Philippe and Paulin-Mohring, Christine},
  year         = {2008},
  pages        = {177–192},
  collection   = {Lecture Notes in Computer Science},
  language     = {en}
}

 @inbook{Foster_Kozen_Mamouras_Reitblatt_Silva_2016,
  address      = {Berlin, Heidelberg},
  series       = {Lecture Notes in Computer Science},
  title        = {Probabilistic NetKAT},
  volume       = {9632},
  isbn         = {978-3-662-49497-4},
  url          = {http://link.springer.com/10.1007/978-3-662-49498-1_12},
  doi          = {10.1007/978-3-662-49498-1_12},
  abstractnote = {This paper presents a new language for network programming based on a probabilistic semantics. We extend the NetKATlanguage with new primitives for expressing probabilistic behaviors and enrich the semantics from one based on deterministic functions to one based on measurable functions on sets of packet histories. We establish fundamental properties of the semantics, prove that it is a conservative extension of the deterministic semantics, show that it satisﬁes a number of natural equations, and develop a notion of approximation. We present case studies that show how the language can be used to model a diverse collection of scenarios drawn from real-world networks.},
  booktitle    = {Programming Languages and Systems},
  publisher    = {Springer Berlin Heidelberg},
  author       = {Foster, Nate and Kozen, Dexter and Mamouras, Konstantinos and Reitblatt, Mark and Silva, Alexandra},
  editor       = {Thiemann, Peter},
  year         = {2016},
  pages        = {282–309},
  collection   = {Lecture Notes in Computer Science},
  language     = {en}
}

 @article{Smolka_Kumar_Foster_Kozen_Silva,
  title        = {Cantor Meets Scott: Semantic Foundations for Probabilistic Networks},
  abstractnote = {ProbNetKAT is a probabilistic extension of NetKAT with a denotational semantics based on Markov kernels. The language is expressive enough to generate continuous distributions, which raises the question of how to compute effectively in the language. This paper gives an new characterization of ProbNetKAT’s semantics using domain theory, which provides the foundation needed to build a practical implementation. We show how to use the semantics to approximate the behavior of arbitrary ProbNetKAT programs using distributions with ﬁnite support. We develop a prototype implementation and show how to use it to solve a variety of problems including characterizing the expected congestion induced by different routing schemes and reasoning probabilistically about reachability in a network.},
  author       = {Smolka, Steffen and Kumar, Praveen and Foster, Nate and Kozen, Dexter and Silva, Alexandra},
  pages        = {15},
  language     = {en}
}

 @article{Kahn_2017,
  title        = {Undecidable Problems for Probabilistic Network Programming},
  url          = {https://ecommons.cornell.edu/handle/1813/51765},
  abstractnote = {The software defined networking language NetKAT is able to verify many useful properties of networks automatically via a PSPACE decision procedure for program equality. However, for its probabilistic extension ProbNetKAT, no such decision procedure is known. We show that several potentially useful properties of ProbNetKAT are in fact undecidable, including emptiness of support intersection and certain kinds of distribution bounds and program comparisons. We do so by embedding the Post Correspondence Problem in ProbNetKAT via direct product expressions, and by directly embedding probabilistic ﬁnite automata.},
  note         = {Accepted: 2017-07-07T21:06:16Z},
  author       = {Kahn, David},
  year         = {2017},
  month        = {Jul},
  language     = {en}
}

 @inproceedings{Foster_Kozen_Milano_Silva_Thompson_2015,
  address      = {New York, NY, USA},
  series       = {POPL ’15},
  title        = {A Coalgebraic Decision Procedure for NetKAT},
  isbn         = {978-1-4503-3300-9},
  url          = {https://doi.org/10.1145/2676726.2677011},
  doi          = {10.1145/2676726.2677011},
  abstractnote = {NetKAT is a domain-specific language and logic for specifying and verifying network packet-processing functions. It consists of Kleene algebra with tests (KAT) augmented with primitives for testing and modifying packet headers and encoding network topologies. Previous work developed the design of the language and its standard semantics, proved the soundness and completeness of the logic, defined a PSPACE algorithm for deciding equivalence, and presented several practical applications. This paper develops the coalgebraic theory of NetKAT, including a specialized version of the Brzozowski derivative, and presents a new efficient algorithm for deciding the equational theory using bisimulation. The coalgebraic structure admits an efficient sparse representation that results in a significant reduction in the size of the state space. We discuss the details of our implementation and optimizations that exploit NetKAT’s equational axioms and coalgebraic structure to yield significantly improved performance. We present results from experiments demonstrating that our tool is competitive with state-of-the-art tools on several benchmarks including all-pairs connectivity, loop-freedom, and translation validation.},
  booktitle    = {Proceedings of the 42nd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
  publisher    = {Association for Computing Machinery},
  author       = {Foster, Nate and Kozen, Dexter and Milano, Mae and Silva, Alexandra and Thompson, Laure},
  year         = {2015},
  month        = {Jan},
  pages        = {343–355},
  collection   = {POPL ’15}
}

 @article{Schmid_Kappé_Kozen_Silva_2021,
  title        = {Guarded Kleene Algebra with Tests: Coequations, Coinduction, and Completeness},
  url          = {http://arxiv.org/abs/2102.08286},
  doi          = {10.4230/LIPIcs.ICALP.2021.142},
  abstractnote = {Guarded Kleene Algebra with Tests (GKAT) is an efficient fragment of KAT, as it allows for almost linear decidability of equivalence. In this paper, we study the (co)algebraic properties of GKAT. Our initial focus is on the fragment that can distinguish between unsuccessful programs performing different actions, by omitting the so-called early termination axiom. We develop an operational (coalgebraic) and denotational (algebraic) semantics and show that they coincide. We then characterize the behaviors of GKAT expressions in this semantics, leading to a coequation that captures the covariety of automata corresponding to behaviors of GKAT expressions. Finally, we prove that the axioms of the reduced fragment are sound and complete w.r.t. the semantics, and then build on this result to recover a semantics that is sound and complete w.r.t. the full set of axioms.},
  note         = {arXiv:2102.08286 [cs]},
  author       = {Schmid, Todd and Kappé, Tobias and Kozen, Dexter and Silva, Alexandra},
  year         = {2021},
  month        = {May}
}

 @article{Smolka_Foster_Hsu_Kappé_Kozen_Silva_2020,
  title        = {Guarded Kleene algebra with tests: verification of uninterpreted programs in nearly linear time},
  volume       = {4},
  issn         = {2475-1421},
  doi          = {10.1145/3371129},
  abstractnote = {Guarded Kleene Algebra with Tests (GKAT) is a variation on Kleene Algebra with Tests (KAT) that arises by restricting the union (+) and iteration (*) operations from KAT to predicate-guarded versions. We develop the (co)algebraic theory of GKAT and show how it can be efficiently used to reason about imperative programs. In contrast to KAT, whose equational theory is PSPACE-complete, we show that the equational theory of GKAT is (almost) linear time. We also provide a full Kleene theorem and prove completeness for an analogue of Salomaa’s axiomatization of Kleene Algebra.},
  number       = {POPL},
  journal      = {Proceedings of the ACM on Programming Languages},
  author       = {Smolka, Steffen and Foster, Nate and Hsu, Justin and Kappé, Tobias and Kozen, Dexter and Silva, Alexandra},
  year         = {2020},
  month        = {Jan},
  pages        = {1–28},
  language     = {en}
}

 @inproceedings{McIver_Weber_2005,
  address      = {Berlin, Heidelberg},
  series       = {Lecture Notes in Computer Science},
  title        = {Towards Automated Proof Support for Probabilistic Distributed Systems},
  isbn         = {978-3-540-31650-3},
  doi          = {10.1007/11591191_37},
  abstractnote = {The mechanisation of proofs for probabilistic systems is particularly challenging due to the verification of real-valued properties that probability entails: experience indicates [12,4,11] that there are many difficulties in automating real-number arithmetic in the context of other program features.},
  booktitle    = {Logic for Programming, Artificial Intelligence, and Reasoning},
  publisher    = {Springer},
  author       = {McIver, Annabelle K. and Weber, Tjark},
  editor       = {Sutcliffe, Geoff and Voronkov, Andrei},
  year         = {2005},
  pages        = {534–548},
  collection   = {Lecture Notes in Computer Science},
  language     = {en}
}

 @inproceedings{McIver_Rabehaja_Struth_2011,
  address      = {Berlin, Heidelberg},
  series       = {RAMICS’11},
  title        = {On probabilistic kleene algebras, automata and simulations},
  isbn         = {978-3-642-21069-3},
  abstractnote = {We show that a class of automata modulo simulation equivalence forms a model of probabilistic Kleene algebra. We prove completeness of this model with respect to continuous probabilistic Kleene algebras. Hence an identity is valid in continuous probabilistic Kleene algebras if and only if the associated automata are simulation equivalent.},
  booktitle    = {Proceedings of the 12th international conference on Relational and algebraic methods in computer science},
  publisher    = {Springer-Verlag},
  author       = {McIver, Annabelle and Rabehaja, Tahiry M. and Struth, Georg},
  year         = {2011},
  month        = {May},
  pages        = {264–279},
  collection   = {RAMICS’11}
}

 @article{McIver_Gonzalia_Cohen_Morgan_2008,
  series       = {Relations and Kleene Algebras in Computer Science},
  title        = {Using probabilistic Kleene algebra pKA for protocol verification},
  volume       = {76},
  issn         = {1567-8326},
  doi          = {10.1016/j.jlap.2007.10.005},
  abstractnote = {We propose a method for verification of probabilistic distributed systems in which a variation of Kozen’s Kleene Algebra with Tests [Dexter Kozen, Kleene algebra with tests, ACM Trans. Programming Lang. Syst. 19(3) (1997) 427–443] is used to take account of the well known interaction of probability and “adversarial” scheduling [Annabelle McIver, Carroll Morgan, Abstraction, Refinement and Proof for Probabilistic Systems, Technical Monographs in Computer Science, Springer-Verlag, New York, 2004]. We describe pKA, a probabilistic Kleene-style algebra, based on a widely accepted model of probabilistic/demonic computation [Jifeng He, K. Seidel, A.K. McIver, Probabilistic models for the guarded command language, Sci. Comput. Programming 28 (1997) 171–192; Roberto Segala, Modeling and verification of randomized distributed real-time systems, Ph.D. thesis, MIT, 1995; Roberto Segala, Modeling and Verification of Randomized Distributed Real-Time Systems, PhD thesis, MIT, 1995; Annabelle McIver, Carroll Morgan, Abstraction, Refinement and Proof for Probabilistic Systems, Technical Monographs in Computer Science, Springer-Verlag, New York, 2004]. Our technical aim is to express probabilistic versions of Cohen’s separation theorems [E. Cohen, Separation and reduction, in: Mathematics of Program Construction, 5th International Conference, LNCS, vol. 1837, Springer-Verlag, July 2000, pp. 45–59]. Separation theorems simplify reasoning about distributed systems, where with purely algebraic reasoning they can reduce complicated interleaving behaviour to “separated” behaviours each of which can be analysed on its own. Until now that has not been possible for probabilistic distributed systems. We present two case studies. The first treats a simple voting mechanism in the algebraic style, and the second—based on Rabin’s Mutual exclusion with bounded waiting [Eyal Kushilevitz, M.O. Rabin, Randomized mutual exclusion algorithms revisited, in: Proceedings of the 11th Annual ACM Symposium on Principles of Distributed Computing, 1992, pp. 275–283]—is one where verification problems have already occurred: the original presentation [M.O. Rabin, N-process mutual exclusion with bounded waiting by 4log2n-valued shared variable, Journal of Computer and System Sciences, 25(1) (1982) 66–75] was later shown to have subtle flaws [I. Saias, Proving probabilistic correctness statements: the case of Rabin’s algorithm for mutual exclusion, in: Proceedings of the 11th Annual ACM Symposium on Principles of Distributed Computing, 1992]. It motivates our interest in algebras, where assumptions relating probability and secrecy are clearly exposed and, in some cases, can be given simple characterisations in spite of their intricacy. Finally we show how the algebraic proofs for these theorems can be automated using a modification of Aboul-Hosn and Kozen’s KAT-ML [Kamal Aboul-Hosn, Dexter Kozen, KAT-ML: An interactive theorem prover for Kleene algebra with tests, J. Appl. Non-Classical Logics 1 (2006)].},
  number       = {1},
  journal      = {The Journal of Logic and Algebraic Programming},
  author       = {McIver, A. K. and Gonzalia, C. and Cohen, E. and Morgan, C. C.},
  year         = {2008},
  month        = {May},
  pages        = {90–111},
  collection   = {Relations and Kleene Algebras in Computer Science},
  language     = {en}
}

@misc{Morgan_McIver_1997,
  title        = {A Probabilistic Temporal Calculus Based on Expectations},
  abstractnote = {Generalising Boolean-valued predicates to expectations --- functions from the state space into [0; 1] -- allows the definition of probabilistic temporal operators that treat explicit probabilities as well as demonic nondeterminism and divergence. The conventional operational interpretation of the temporal operators does not generalise so easily: although one may speak of “satisfying a predicate” in the standard case, it is not meaningful to “satisfy an expectation”. That difficulty is avoided by giving the operational interpretation of the operators for the probabilistic case in terms of various kinds of gambling game.},
  author       = {Morgan, Carroll and McIver, Annabelle},
  year         = {1997}
}

@inproceedings{barthe_2018,
  title        = {An assertion-based program logic for probabilistic programs},
  author       = {Barthe, Gilles and Espitau, Thomas and Gaboardi, Marco and Gr{\'e}goire, Benjamin and Hsu, Justin and Strub, Pierre-Yves},
  booktitle    = {Programming Languages and Systems: 27th European Symposium on Programming, ESOP 2018, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018, Thessaloniki, Greece, April 14-20, 2018, Proceedings 27},
  pages        = {117--144},
  year         = {2018},
  organization = {Springer International Publishing}
}

 @inproceedings{Smolka_Kumar_Kahn_Foster_Hsu_Kozen_Silva_2019,
  address      = {Phoenix AZ USA},
  title        = {Scalable verification of probabilistic networks},
  isbn         = {978-1-4503-6712-7},
  url          = {https://dl.acm.org/doi/10.1145/3314221.3314639},
  doi          = {10.1145/3314221.3314639},
  abstractnote = {This paper presents McNetKAT, a scalable tool for verifying probabilistic network programs. McNetKAT is based on a new semantics for the guarded and history-free fragment of Probabilistic NetKAT in terms of finite-state, absorbing Markov chains. This view allows the semantics of all programs to be computed exactly, enabling construction of an automatic verification tool. Domain-specific optimizations and a parallelizing backend enable McNetKAT to analyze networks with thousands of nodes, automatically reasoning about general properties such as probabilistic program equivalence and refinement, as well as networking properties such as resilience to failures. We evaluate McNetKAT’s scalability using real-world topologies, compare its performance against state-of-the-art tools, and develop an extended case study on a recently proposed data center network design.},
  booktitle    = {Proceedings of the 40th ACM SIGPLAN Conference on Programming Language Design and Implementation},
  publisher    = {ACM},
  author       = {Smolka, Steffen and Kumar, Praveen and Kahn, David M. and Foster, Nate and Hsu, Justin and Kozen, Dexter and Silva, Alexandra},
  year         = {2019},
  month        = jun,
  pages        = {190–203},
  language     = {en}
}

 @inproceedings{Pous_2015,
  address      = {New York, NY, USA},
  series       = {POPL ’15},
  title        = {Symbolic Algorithms for Language Equivalence and Kleene Algebra with Tests},
  isbn         = {978-1-4503-3300-9},
  url          = {https://dl.acm.org/doi/10.1145/2676726.2677007},
  doi          = {10.1145/2676726.2677007},
  abstractnote = {We propose algorithms for checking language equivalence of finite automata over a large alphabet. We use symbolic automata, where the transition function is compactly represented using (multi-terminal) binary decision diagrams (BDD). The key idea consists in computing a bisimulation by exploring reachable pairs symbolically, so as to avoid redundancies. This idea can be combined with already existing optimisations, and we show in particular a nice integration with the disjoint sets forest data-structure from Hopcroft and Karp’s standard algorithm. Then we consider Kleene algebra with tests (KAT), an algebraic theory that can be used for verification in various domains ranging from compiler optimisation to network programming analysis. This theory is decidable by reduction to language equivalence of automata on guarded strings, a particular kind of automata that have exponentially large alphabets. We propose several methods allowing to construct symbolic automata out of KAT expressions, based either on Brzozowski’s derivatives or on standard automata constructions. All in all, this results in efficient algorithms for deciding equivalence of KAT expressions.},
  booktitle    = {Proceedings of the 42nd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
  publisher    = {Association for Computing Machinery},
  author       = {Pous, Damien},
  year         = {2015},
  month        = jan,
  pages        = {357–368},
  collection   = {POPL ’15}
}

 @article{Kozen_2008,
  title        = {On the Coalgebraic Theory of Kleene Algebra with Tests},
  url          = {https://ecommons.cornell.edu/handle/1813/10173},
  abstractnote = {We develop a coalgebraic theory of Kleene algebra with tests (KAT) along the lines of Rutten (1998) for Kleene algebra (KA) and Chen and Pucella (2003) for a limited version of KAT, resolving two open problems of Chen and Pucella.  Our treatment includes a simple definition of the Brzozowski derivative for KAT expressions and an automata-theoretic interpretation involving automata on guarded strings.  We also give a complexity analysis, showing that an efficient implementation of coinductive equivalence proofs in this setting is tantamount to a standard automata-theoretic construction.  It follows that coinductive equivalence proofs can be generated automatically in PSPACE.  This matches the bound of Worthington (2008) for the automatic generation of equational proofs in KAT.},
  note         = {Accepted: 2008-03-14T18:49:38Z},
  author       = {Kozen, Dexter},
  year         = {2008},
  month        = mar,
  language     = {en}
}

@book{Minsky_1967,
  address      = {USA},
  title        = {Computation: finite and infinite machines},
  isbn         = {978-0-13-165563-8},
  abstractnote = {From the Preface (See Front Matter for full Preface) Man has within a single generation found himself sharing the world with a strange new species: the computers and computer-like machines. Neither history, nor philosophy, nor common sense will tell us how these machines will affect us, for they do not do “work” as did machines of the Industrial Revolution. Instead of dealing with materials or energy, we are told that they handle “control” and “information” and even “intellectual processes.” There are very few individuals today who doubt that the computer and its relatives are developing rapidly in capability and complexity, and that these machines are destined to play important (though not as yet fully understood) roles in society’s future. Though only some of us deal directly with computers, all of us are falling under the shadow of their ever-growing sphere of influence, and thus we all need to understand their capabilities and their limitations. It would indeed be reassuring to have a book that categorically and systematically described what all these machines can do and what they cannot do, giving sound theoretical or practical grounds for each judgment. However, although some books have purported to do this, it cannot be done for the following reasons: a) Computer-like devices are utterly unlike anything which science has ever considered---we still lack the tools necessary to fully analyze, synthesize, or even think about them; and b) The methods discovered so far are effective in certain areas, but are developing much too rapidly to allow a useful interpretation and interpolation of results. The abstract theory---as described in this book---tells us in no uncertain terms that the machines’ potential range is enormous, and that its theoretical limitations are of the subtlest and most elusive sort. There is no reason to suppose machines have any limitations not shared by man.},
  publisher    = {Prentice-Hall, Inc.},
  author       = {Minsky, Marvin L.},
  year         = {1967}
}

@article{Minsky_1961,
  title    = {Recursive Unsolvability of Post’s Problem of “Tag” and other Topics in Theory of Turing Machines},
  volume   = {74},
  issn     = {0003486X},
  doi      = {10.2307/1970290},
  number   = {3},
  journal  = {The Annals of Mathematics},
  author   = {Minsky, Marvin L.},
  year     = {1961},
  month    = nov,
  pages    = {437},
  language = {en}
}

 @article{Lambek_1961,
  title    = {How to Program an Infinite Abacus},
  volume   = {4},
  issn     = {0008-4395, 1496-4287},
  doi      = {10.4153/CMB-1961-032-6},
  number   = {3},
  journal  = {Canadian Mathematical Bulletin},
  author   = {Lambek, Joachim},
  year     = {1961},
  month    = sep,
  pages    = {295–302},
  language = {en}
}

 @book{Burris_Sankappanavar_1981,
  address    = {New York},
  series     = {Graduate texts in mathematics},
  title      = {A course in universal algebra},
  isbn       = {978-0-387-90578-5},
  callnumber = {QA251 .B87},
  publisher  = {Springer-Verlag},
  author     = {Burris, Stanley and Sankappanavar, H. P.},
  year       = {1981},
  collection = {Graduate texts in mathematics}
}

@inproceedings{DBLP:conf/fossacs/DoumaneKPP19,
  author    = {Amina Doumane and
               Denis Kuperberg and
               Damien Pous and
               Pierre Pradic},
  editor    = {Mikolaj Bojanczyk and
               Alex Simpson},
  title     = {Kleene Algebra with Hypotheses},
  booktitle = {Foundations of Software Science and Computation Structures - 22nd
               International Conference, {FOSSACS} 2019, Held as Part of the European
               Joint Conferences on Theory and Practice of Software, {ETAPS} 2019,
               Prague, Czech Republic, April 6-11, 2019, Proceedings},
  series    = {Lecture Notes in Computer Science},
  volume    = {11425},
  pages     = {207--223},
  publisher = {Springer},
  year      = {2019},
  url       = {https://doi.org/10.1007/978-3-030-17127-8\_12},
  doi       = {10.1007/978-3-030-17127-8\_12},
  timestamp = {Fri, 31 Jan 2020 21:32:20 +0100},
  biburl    = {https://dblp.org/rec/conf/fossacs/DoumaneKPP19.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/lics/Kozen97,
  author    = {Dexter Kozen},
  title     = {On the Complexity of Reasoning in Kleene Algebra},
  booktitle = {Proceedings, 12th Annual {IEEE} Symposium on Logic in Computer Science,
               Warsaw, Poland, June 29 - July 2, 1997},
  pages     = {195--202},
  publisher = {{IEEE} Computer Society},
  year      = {1997},
  url       = {https://doi.org/10.1109/LICS.1997.614947},
  doi       = {10.1109/LICS.1997.614947},
  timestamp = {Fri, 24 Mar 2023 00:01:50 +0100},
  biburl    = {https://dblp.org/rec/conf/lics/Kozen97.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{Pous_Rot_Wagemaker_2022,
  title        = {On Tools for Completeness of Kleene Algebra with Hypotheses},
  url          = {http://arxiv.org/abs/2210.13020},
  doi          = {10.48550/arXiv.2210.13020},
  abstractnote = {In the literature on Kleene algebra, a number of variants have been proposed which impose additional structure specified by a theory, such as Kleene algebra with tests (KAT) and the recent Kleene algebra with observations (KAO), or make specific assumptions about certain constants, as for instance in NetKAT. Many of these variants fit within the unifying perspective offered by Kleene algebra with hypotheses, which comes with a canonical language model constructed from a given set of hypotheses. For the case of KAT, this model corresponds to the familiar interpretation of expressions as languages of guarded strings. A relevant question therefore is whether Kleene algebra together with a given set of hypotheses is complete with respect to its canonical language model. In this paper, we revisit, combine and extend existing results on this question to obtain tools for proving completeness in a modular way. We showcase these tools by giving new and modular proofs of completeness for KAT, KAO and NetKAT, and we prove completeness for new variants of KAT: KAT extended with a constant for the full relation, KAT extended with a converse operation, and a version of KAT where the collection of tests only forms a distributive lattice.},
  note         = {arXiv:2210.13020 [cs]},
  number       = {arXiv:2210.13020},
  publisher    = {arXiv},
  author       = {Pous, Damien and Rot, Jurriaan and Wagemaker, Jana},
  year         = {2022},
  month        = oct
}

@article{Zhang_deAmorim_Gaboardi_2022,
  title        = {On Incorrectness Logic and Kleene Algebra with Top and Tests},
  url          = {http://arxiv.org/abs/2108.07707},
  doi          = {10.48550/arXiv.2108.07707},
  abstractnote = {Kleene algebra with tests (KAT) is a foundational equational framework for reasoning about programs, which has found applications in program transformations, networking and compiler optimizations, among many other areas. In his seminal work, Kozen proved that KAT subsumes propositional Hoare logic, showing that one can reason about the (partial) correctness of while programs by means of the equational theory of KAT. In this work, we investigate the support that KAT provides for reasoning about incorrectness, instead, as embodied by Ohearn’s recently proposed incorrectness logic. We show that KAT cannot directly express incorrectness logic. The main reason for this limitation can be traced to the fact that KAT cannot express explicitly the notion of codomain, which is essential to express incorrectness triples. To address this issue, we study Kleene Algebra with Top and Tests (TopKAT), an extension of KAT with a top element. We show that TopKAT is powerful enough to express a codomain operation, to express incorrectness triples, and to prove all the rules of incorrectness logic sound. This shows that one can reason about the incorrectness of while-like programs by means of the equational theory of TopKAT.},
  note         = {arXiv:2108.07707 [cs]},
  number       = {arXiv:2108.07707},
  publisher    = {arXiv},
  author       = {Zhang, Cheng and de Amorim, Arthur Azevedo and Gaboardi, Marco},
  year         = {2022},
  month        = aug
}

 @inproceedings{Hoare_Möller_Struth_Wehrman_2009,
  title  = {Concurrent Kleene Algebra},
  volume = {5710},
  isbn   = {978-3-642-04080-1},
  doi    = {10.1007/978-3-642-04081-8_27},
  author = {Hoare, C. and Möller, Bernhard and Struth, Georg and Wehrman, Ian},
  year   = {2009},
  month  = sep,
  pages  = {399–414}
}

@inbook{McIver_Cohen_Morgan_2006,
  address      = {Berlin, Heidelberg},
  series       = {Lecture Notes in Computer Science},
  title        = {Using Probabilistic Kleene Algebra for Protocol Verification},
  volume       = {4136},
  isbn         = {978-3-540-37873-0},
  url          = {http://link.springer.com/10.1007/11828563_20},
  doi          = {10.1007/11828563_20},
  abstractnote = {We describe pKA, a probabilistic Kleene-style algebra, based on a well known model of probabilistic/demonic computation [3, 16, 10]. Our technical aim is to express probabilistic versions of Cohen’s separation theorems[1].},
  booktitle    = {Relations and Kleene Algebra in Computer Science},
  publisher    = {Springer Berlin Heidelberg},
  author       = {McIver, A. K. and Cohen, E. and Morgan, C. C.},
  editor       = {Schmidt, Renate A.},
  year         = {2006},
  pages        = {296–310},
  collection   = {Lecture Notes in Computer Science},
  language     = {en}
}

